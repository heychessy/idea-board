{"version":3,"sources":["logo.svg","Components/Ideas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Ideas","props","handleTitleChange","e","id","preventDefault","ideaList","state","map","idea","index","title","target","value","setState","handleBodyChange","body","bodyLength","length","removeIdea","splice","addIdea","unshift","created_date","Date","onBlur","localStorage","setItem","JSON","stringify","showNotification","dropdown","document","getElementById","classList","toggle","sortByTitle","sort","a","b","localeCompare","sortByDate","x","className","setTimeout","replace","getItem","parse","this","onClick","href","item","key","placeholder","onChange","maxLength","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.56e6d6e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\n\nclass Ideas extends Component {\n  constructor(props) {\n    super(props);\n    //initial list\n    let ideaList = [\n      {\n        id: \"1234\",\n        created_date: new Date(),\n        title: \"Instragram Bot\",\n        body: \"A python script to automate instagram posts.\",\n        bodyLength: 0\n      },\n      {\n        id: \"1235\",\n        created_date: new Date(),\n        title: \"Idea Generator\",\n        body: \"A websitre crawler to fetch trending ideas from the internet.\",\n        bodyLength: 0\n      },\n      {\n        id: \"1236\",\n        created_date: new Date(),\n        title: \"Franchise Store\",\n        body: \"A cafe franchise of a renowned brand.\",\n        bodyLength: 0\n      }\n    ];\n    this.state = {\n      ideaList: ideaList\n    };\n  }\n\n  handleTitleChange = (e, id) => {\n    e.preventDefault();\n    let ideaList = this.state.ideaList;\n    ideaList.map((idea, index) => {\n      if (index === id) idea.title = e.target.value;\n    });\n    this.setState({ ideaList });\n  };\n  handleBodyChange = (e, id) => {\n    e.preventDefault();\n    let ideaList = this.state.ideaList;\n    ideaList.map((idea, index) => {\n      if (index === id) {\n        idea.body = e.target.value;\n        idea.bodyLength = e.target.value.length;\n      }\n    });\n    this.setState({ ideaList });\n  };\n  removeIdea = index => {\n    const ideaList = this.state.ideaList;\n    ideaList.splice(index, 1);\n    this.setState({ ideaList });\n  };\n  addIdea = () => {\n    const ideaList = this.state.ideaList;\n    ideaList.unshift({\n      id: ideaList.length + 1,\n      created_date: new Date(),\n      title: \"\",\n      body: \"\"\n    });\n    this.setState({ ideaList });\n  };\n  onBlur = (e, index) => {\n    //Api call to save current Item can be made here...\n    //saving in the localstorage\n    localStorage.setItem(\"ideaList\", JSON.stringify(this.state.ideaList));\n    this.showNotification();\n  };\n\n  dropdown = () => {\n    document.getElementById(\"myDropdown\").classList.toggle(\"show\");\n  };\n  componentDidMount() {\n    if (localStorage.getItem(\"ideaList\")) {\n      let ideaList = [];\n      ideaList = JSON.parse(localStorage.getItem(\"ideaList\"));\n      this.setState({ ideaList });\n    }\n  }\n  sortByTitle = e => {\n    e.preventDefault();\n    const ideaList = this.state.ideaList;\n    ideaList.sort((a, b) => a.title.localeCompare(b.title));\n    this.setState({ ideaList });\n  };\n  sortByDate = e => {\n    e.preventDefault();\n    const ideaList = this.state.ideaList;\n    ideaList.sort(\n      (a, b) => new Date(b.created_date) - new Date(a.created_date)\n    );\n    this.setState({ ideaList });\n  };\n  showNotification = () => {\n    var x = document.getElementById(\"notification\");\n    x.className = \"show\";\n    setTimeout(function() {\n      x.className = x.className.replace(\"show\", \"\");\n    }, 3000);\n  };\n  render() {\n    return (\n      <div className=\"mainDiv\">\n        <div className=\"header\">\n          <div>\n            <h1>Post your Ideas</h1>\n          </div>\n\n          <div>\n            <button className=\"addButton\" onClick={this.addIdea}>\n              Create<i className=\"material-icons\">edit</i>\n            </button>\n          </div>\n\n          <div className=\"dropdown\">\n            <span>Sort</span> <i className=\"material-icons\">sort</i>\n            <a href=\"\" onClick={e => this.sortByTitle(e)}>\n              <div className=\"dropdown-content\">\n                <p>Title</p>\n              </div>\n            </a>\n            <a href=\"\" onClick={e => this.sortByDate(e)}>\n              <div className=\"dropdown-content\">\n                <p>Date</p>\n              </div>\n            </a>\n          </div>\n        </div>\n\n        <ul>\n          {this.state.ideaList.map((item, index) => {\n            return (\n              <li className=\"list-group-item\" key={index}>\n                <div className=\"parentDiv\">\n                  <div className=\"inputDiv\">\n                    <input\n                      value={item.title}\n                      placeholder=\"...idea title\"\n                      onChange={e => this.handleTitleChange(e, index)}\n                      onBlur={e => this.onBlur(e, index)}\n                    />\n                    <textarea\n                      maxLength=\"150\"\n                      value={item.body}\n                      placeholder=\"....describe your idea (max:150)\"\n                      onChange={e => this.handleBodyChange(e, index)}\n                      onBlur={e => this.onBlur(e, index)}\n                    />\n                    <div>\n                      {item.bodyLength > 135\n                        ? `Remaining ${150 - item.bodyLength} chars`\n                        : ``}\n                    </div>\n                  </div>\n                  <div className=\"deleteButton\">\n                    <button onClick={this.removeIdea}>\n                      <i className=\"material-icons\">delete</i>\n                    </button>\n                  </div>\n                </div>\n              </li>\n            );\n          })}\n        </ul>\n        <div id=\"notification\">saved.</div>\n      </div>\n    );\n  }\n}\nexport default Ideas;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Ideas from \"./Components/Ideas\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Ideas />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}